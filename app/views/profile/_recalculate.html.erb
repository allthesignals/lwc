<div class="row margins">
  <div class="col-md-4">
    <div class="center">
      <div class="data-panel" title="Calculations" data-content="Description of how this value is calculated">
        <div>
          <div>
            <h4>$12 <sub>per hr</sub></h4> <h4>Living Wage</h4>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-md-4">
    <div class="row" id="contributions">
<!--       <div class="col-xs-4 center">
        <div class="panel panel-default">
          <div class="panel-body">42</div>
        </div>
      </div>
      <div class="col-xs-4 center">
        <div class="panel panel-default">
          <div class="panel-body">42</div>
        </div>
      </div>
      <div class="col-xs-4 center">
        <div class="panel panel-default">
          <div class="panel-body">42</div>
        </div>
      </div>
      <div class="col-xs-4 center">
        <div class="panel panel-default">
          <div class="panel-body">42</div>
        </div>
      </div>
      <div class="col-xs-4 center">
        <div class="panel panel-default">
          <div class="panel-body">42</div>
        </div>
      </div>
      <div class="col-xs-4 center">
        <div class="panel panel-default">
          <div class="panel-body">42</div>
        </div>
      </div> -->
    </div>
  </div>
  <div class="col-md-4" id="donutchart">
  </div>
  <script>

var dispatch = d3.dispatch("load", "statechange");

var groups = [
  "house_cost",
  "childcare_cost",
  "health_cost",
  "food_cost",
  "trans_cost",
  "other_cost"
];

// A drop-down menu for selecting a state; uses the "menu" namespace.
dispatch.on("load.menu", function(stateById) {
  var select = d3.select("#donutchart")
    .append("div")
    .append("select")
      .on("change", function() { dispatch.statechange(stateById.get(this.value)); })

  select.selectAll("option")
      .data(stateById.values())
    .enter().append("option")
      .attr("value", function(d) { return d.familycomposition; })
      .text(function(d) { return d.familycomposition; });

  dispatch.on("statechange.menu", function(state) {
     $("#contributions").empty(); 
    select.property("value", state.familycomposition);
  });
});

dispatch.on("load.bar", function(stateById) {

  console.log(stateById.values())

  var div = d3.select("#contributions")
    var contributions = div.selectAll("div")

            


  dispatch.on("statechange.bar", function(d) {
contributions
      .data(d.values)
      .enter()
        .append("div")
        .attr("class", "col-xs-4 center")
          .append("div")
          .attr("class", "panel panel-default")
            .append("div")
            .attr("class", "panel-body")
            .text(function(d) { return d.value})

  });
});

// A pie chart to show population by age group; uses the "pie" namespace.
dispatch.on("load.pie", function(stateById) {

  var width = 350,
      height = 350,
      radius = Math.min(width, height) / 2;

  var color = d3.scale.ordinal()
      .domain(groups)
      .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

  var arc = d3.svg.arc()
      .outerRadius(radius - 20)
      .innerRadius(radius - 70);

  var pie = d3.layout.pie()
      .sort(null);

  var svg = d3.select("#donutchart").append("svg")
      .attr("width", width)
      .attr("height", height)
    .append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

  var path = svg.selectAll("path")
      .data(groups)
    .enter().append("path")
      .style("fill", color)
      .each(function() { this._current = {startAngle: 0, endAngle: 0}; });

  dispatch.on("statechange.pie", function(d) {
    path.data(pie.value(function(g) { return d[g]; })(groups)).transition()
        .attrTween("d", function(d) {
          var interpolate = d3.interpolate(this._current, d);
          this._current = interpolate(0);
          return function(t) {
            return arc(interpolate(t));
          };
        });
  });
});


var stateById = d3.map();

gon.contributions.forEach(function(d) { 
  var values = [];



  for(var prop in d){
    values.push({ name: prop, value: d[prop] })
  }; 

  values = values.filter(function(d) { console.log(d.name == "familycomposition"); return d.name !== "familycomposition" });

  d.values = values;




  stateById.set(d.familycomposition, d); 
});

dispatch.load(stateById);
dispatch.statechange(stateById.get("2A1C"));

  </script>
</div>