%div.row.margins
  %div.col-sm-4
    %div#donutchart
  %div.col-sm-3#contributions
  %div.col-sm-5
    Description

:javascript

  var dispatch = d3.dispatch("load", "statechange");

  var groups = [
    "house_cost",
    "childcare_cost",
    "health_cost",
    "food_cost",
    "trans_cost",
    "other_cost"
  ];

  var color = d3.scale.ordinal()
      .domain(groups)
      .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

  // A drop-down menu for selecting a state; uses the "menu" namespace.
  dispatch.on("load.menu", function(stateById) {
    var select = d3.select("#donut-chart-menu")
      .append("div")
      .append("select")
        .attr("class", "form-control")
        .on("change", function() { dispatch.statechange(stateById.get(this.value)); })

    select.selectAll("option")
        .data(stateById.values())
      .enter().append("option")
        .attr("value", function(d) { return d.familycomposition; })
        .text(function(d) { return d.familycomposition; });

    dispatch.on("statechange.menu", function(state) {
       $("#contributions").empty(); 
       $("#living-wage-append").empty();
       $("#other-wages-append").empty();
      select.property("value", state.familycomposition);
    });
  });

  dispatch.on("load.bar", function(stateById) {

    var div = d3.select("#contributions")
      

    dispatch.on("statechange.bar", function(d) {

    var contributions = div.selectAll("div")
        contributions
          .data(d.contributions)
          .enter()
            .append("button")
            .attr("type", "button")
            .attr("class", "btn")
            .text(function(d) { return d.value })
              .append("span")
              .attr("class", function(d) {
                if (d.name == "house_cost") {return "glyphicon glyphicon-home"}
                if (d.name == "childcare_cost") { return "glyphicon glyphicon-heart"}
                if (d.name == "health_cost") { return "glyphicon glyphicon-plus-sign"}
                if (d.name == "food_cost") { return "glyphicon glyphicon-leaf"}
                if (d.name == "trans_cost") { return "glyphicon glyphicon-road"}
                if (d.name == "other_cost") { return "glyphicon glyphicon-asterisk"}
              })
                    

    });
  });

  dispatch.on("load.wages", function(stateById) {

    var livingWageElement = d3.select("#living-wage-append")
    var otherWagesElement = d3.select("#other-wages-append")

    dispatch.on("statechange.wages", function(d) {

      var livingWageData = d.wages.filter(function(d,i) {
        return d.name == "income_hrly";
      });

      var otherWageData = d.wages.filter(function(d,i) {
        return d.name !== "income_hrly";
      })

      console.log(livingWageData, otherWageData);

      var livingWage = livingWageElement.selectAll("div")
          .data(livingWageData).enter();

      livingWage
        .append("div")
        .attr("id", "living-wage")
        .text(function(d) {
          return "$" + d.value + " Living Wage";
        })

      var otherWages = otherWagesElement.selectAll("div")
          .data(otherWageData).enter();

      otherWages
        .append("div")
        .attr("class", "other-wages")
        .text(function(d) {
          if (d.name == "poverty_hrly") {
            return "$" + d.value + " Poverty Wage";
          }

          if (d.name == "minwage_hrly") {
            return "$" + d.value + " Minimum Wage";
          }
        })

    });
  });

  // A pie chart to show population by age group; uses the "pie" namespace.
  dispatch.on("load.pie", function(stateById) {

    d3.select(window).on('resize', resize); 

    var width = 350,
        height = 350,
        radius = Math.min(width, height) / 2;

    var arc = d3.svg.arc()
        .outerRadius(radius - 20)
        .innerRadius(radius - 70);

    var pie = d3.layout.pie()
        .sort(null);

    var svg = d3.select("#donutchart").append("svg")
        .attr("width", width)
        .attr("height", height)
      .append("g")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

    var path = svg.selectAll("path")
        .data(groups)
      .enter().append("path")
        .style("fill", color)
        .each(function() { this._current = {startAngle: 0, endAngle: 0}; });

    function resize() { 
      width = parseInt(d3.select('#donutchart').style('width'), 10);
      height = parseInt(d3.select('#donutchart').style('height'), 10);

      var radius = Math.min(width, height) / 2;
      arc.outerRadius(radius - 20);
      arc.innerRadius(radius - 70);

    }

    dispatch.on("statechange.pie", function(d) {
      path.data(pie.value(function(g) { return d[g]; })(groups)).transition()
          .attrTween("d", function(d) {
            var interpolate = d3.interpolate(this._current, d);
            this._current = interpolate(0);
            return function(t) {
              return arc(interpolate(t));
            };
          });
    });
  });


  var stateById = d3.map();

  gon.contributions.forEach(function(d) { 
    var pluck = [];
    var contributions = [];
    var wages = [];

    for(var prop in d){
      pluck.push({ name: prop, value: d[prop] })
    }; 

    contributions = pluck.filter(function(d) { return d.name !== "familycomposition" && d.name !== "minwage_hrly" && d.name !== "income_hrly" && d.name !== "poverty_hrly" });

    wages = pluck.filter(function(d) { return d.name == "minwage_hrly" || d.name == "income_hrly" || d.name == "poverty_hrly"  });

    d.contributions = contributions;
    d.wages = wages;


    stateById.set(d.familycomposition, d); 
  });

  dispatch.load(stateById);
  dispatch.statechange(stateById.get("2A1C"));
