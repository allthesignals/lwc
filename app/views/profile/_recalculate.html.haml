%div.row.margins
  %div.col-sm-5
    %div#donutchart
  %div.col-sm-2#contributions
  %div.col-sm-5
    %div.tab-content
      %div.tab-pane.fade#house_cost 
        %h1
          Housing costs 
        measure the fair-market rent of rental housing, including utility costs, using HUD Fair Market Rents estimates for 2014.  

        For further detail, please reference the technical documentation here.
      %div.tab-pane.fade#childcare_cost 
        %h1
          Child care cost 
        represent the lowest cost option, either family child care or child care center, by state as reported by the National Association of Child Care Resource and Referral Agencies in 2013 and are adjusted for inflation.

        For further detail, please reference the technical documentation here.
      %div.tab-pane.fade.in.active#health_cost 
        %h1
          Medical costs 
        are the sum of expenses for insurance premiums and (1) health insurance costs for employer sponsored plans, (3) medical services, (3) drugs, and (4) medical supplies.  Health insurance costs were calculated using the Health Insurance Component Analytical Tool (MEPSnet/IC) provided online by the Agency for Healthcare Research and Quality.  All other costs were estimated using 2012 data from the 2013 Bureau of Labor Statistics Consumer Expenditure Survey, adjusted by region and for inflation.

        For further detail, please reference the technical documentation here.
      %div.tab-pane.fade#food_cost 
        %h1 
          Food cost 
        is estimated using the US Department of Agricultureâ€™s low-cost food plan as of 2013, adjusted for inflation.  The low-cost plan assumes that all meals (including snacks) are prepared in the home.  

        For further detail, please reference the technical documentation here.
      %div.tab-pane.fade#trans_cost
        %h1
          Transportation costs 
        are a measure of the expenses for (1) Used cars and trucks, (2) gasoline and motor oil, (3) other vehicle expenses, and (4) public transportation.  Expenditures for transportation are based on 2012 data by household size from the 2013 Bureau of Labor Statistics Consumer Expenditure Survey and are adjusted for regional variation and inflation.

        For further detail, please reference the technical documentation here.
      %div.tab-pane.fade#other_cost
        %h1
          Other necessities 
        include expenses for (1) apparel and services, (2) housekeeping supplies, (3) personal care products and services, (4) reading, and (5) miscellaneous.  Expenditures for other necessities are based on 2012 data by household size from the 2013 Bureau of Labor Statistics Consumer Expenditure Survey and are adjusted for regional variation and inflation. 

        For further detail, please reference the technical documentation here.

:javascript

  var dispatch = d3.dispatch("load", "statechange");

  var groups = [
    "house_cost",
    "childcare_cost",
    "health_cost",
    "food_cost",
    "trans_cost",
    "other_cost"
  ];

  var color = d3.scale.ordinal()
      .domain(groups)
      .range(["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33"]);


  // A drop-down menu for selecting a state; uses the "menu" namespace.
  dispatch.on("load.menu", function(stateById) {
    var select = d3.select("#donut-chart-menu")
      .append("div")
      .append("select")
        .attr("class", "form-control")
        .on("change", function() { dispatch.statechange(stateById.get(this.value)); })

    select.selectAll("option")
        .data(stateById.values())
      .enter().append("option")
        .attr("value", function(d) { return d.familycomposition; })
        .text(function(d) { return d.familycomposition; });

    dispatch.on("statechange.menu", function(state) {
       $("#contributions").empty(); 
       $("#living-wage-append").empty();
       $("#other-wages-append").empty();
      select.property("value", state.familycomposition);
    });
  });

  dispatch.on("load.bar", function(stateById) {

    var div = d3.select("#contributions")
    

    dispatch.on("statechange.bar", function(d) {

    var contributions = div.selectAll("div")
        contributions
          .data(d.contributions)
          .enter()
            .append("div")
            .attr("class","row")
            .append("button")
            .style("color", function(d) { return color(d.name); })
            .attr("type", "button")
            .attr("class", "btn")
            .attr("href", function(d) {
              return "#" + d.name
            })
            .attr("data-toggle", "tab")
            .text(function(d) { return d.value })
              .append("span")
              .attr("class", function(d) {
                if (d.name == "house_cost") {return "glyphicon glyphicon-home"}
                if (d.name == "childcare_cost") { return "glyphicon glyphicon-heart"}
                if (d.name == "health_cost") { return "glyphicon glyphicon-plus-sign"}
                if (d.name == "food_cost") { return "glyphicon glyphicon-leaf"}
                if (d.name == "trans_cost") { return "glyphicon glyphicon-road"}
                if (d.name == "other_cost") { return "glyphicon glyphicon-asterisk"}
              })
                    

    });
  });

  dispatch.on("load.wages", function(stateById) {

    var livingWageElement = d3.select("#living-wage-append");
    var otherWagesElement = d3.select("#other-wages-append");


    dispatch.on("statechange.wages", function(d) {

      var livingWageData = d.wages.filter(function(d,i) {
        return d.name == "income_hrly";
      });

      var otherWageData = d.wages.filter(function(d,i) {
        return d.name !== "income_hrly";
      })

      var livingWage = livingWageElement.selectAll("div")
          .data(livingWageData).enter();

      livingWage
        .append("div")
        .attr("id", "living-wage")
        .text(function(d) {
          return "$" + d.value + " Living Wage";
        })

      var otherWages = otherWagesElement.selectAll("div")
          .data(otherWageData).enter();

      otherWages
        .append("div")
        .attr("class", "other-wages")
        .text(function(d) {
          if (d.name == "poverty_hrly") {
            return "$" + d.value + " Poverty Wage";
          }

          if (d.name == "minwage_hrly") {
            return "$" + d.value + " Minimum Wage";
          }
        })

    });
  });

  // A pie chart to show population by age group; uses the "pie" namespace.
  dispatch.on("load.pie", function(stateById) {

    var width = 350,
        height = 350,
        radius = Math.min(width, height) / 2;

    var arc = d3.svg.arc()
        .outerRadius(radius - 20)
        .innerRadius(radius - 100);

    var pie = d3.layout.pie()
        .sort(null);

    var svg = d3.select("#donutchart").append("svg")
        .attr("width", width + 20)
        .attr("height", height + 20)
      .append("g")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

    var path = svg.selectAll("path")
        .data(groups)
      .enter().append("path")
        .style("fill", color)
        .each(function() { this._current = {startAngle: 0, endAngle: 0}; })

    dispatch.on("statechange.pie", function(d) {
      path.data(pie.value(function(g) { return d[g]; })(groups))
          .transition()
          .attrTween("d", function(d) {
            var interpolate = d3.interpolate(this._current, d);
            this._current = interpolate(0);
            return function(t) {
              return arc(interpolate(t));
            };
          });

      path.attr("data-title", function(d) { return d.data; });


    });
  });


  var stateById = d3.map();

  gon.contributions.forEach(function(d) { 
    var pluck = [];
    var contributions = [];
    var wages = [];

    for(var prop in d){
      pluck.push({ name: prop, value: d[prop] })
    }; 

    contributions = pluck.filter(function(d) { return d.name !== "familycomposition" && d.name !== "minwage_hrly" && d.name !== "income_hrly" && d.name !== "poverty_hrly" });

    wages = pluck.filter(function(d) { return d.name == "minwage_hrly" || d.name == "income_hrly" || d.name == "poverty_hrly"  });

    d.contributions = contributions;
    d.wages = wages;


    stateById.set(d.familycomposition, d); 
  });

  dispatch.load(stateById);
  dispatch.statechange(stateById.get("2A1C"));
